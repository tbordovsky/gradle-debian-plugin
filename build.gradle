plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.16.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

group = 'com.tbordovsky'
version = '1.0'

pluginBundle {
    website = 'https://github.com/travisbordovsky/gradle-debian-plugin'
    vcsUrl = 'https://github.com/travisbordovsky/gradle-debian-plugin.git'
    tags = ['deb', 'debian', 'jdeb']
}

sourceSets.create('functionalTest')

gradlePlugin {
    plugins {
        debian {
            id = 'io.github.tbordovsky.debian'
            displayName = 'Plugin for debian packaging of java applications'
            description = 'A plugin that helps you create deb packages from java applications with minimal configuration'
            implementationClass = 'io.github.tbordovsky.debian.DebianPlugin'
        }
    }
    testSourceSets(sourceSets.functionalTest) // inject gradleTestKit
}

dependencies {
    implementation group: 'org.vafer', name: 'jdeb', version: '1.8'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.3.1'

    functionalTestImplementation 'junit:junit:4.13.2'
    functionalTestImplementation(project)
}

/**
 * TestKit determines the plugin classpath by running a specific Gradle task. You will need to execute the assemble task
 * to initially generate the plugin classpath or to reflect changes to it even when running TestKit-based functional
 * tests from the IDE
 */
tasks.register('functionalTest', Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.withType(Test).configureEach {
    useJUnit()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}